package com.yolt.providers.stet.bpcegroup.common.service.pec;

import com.yolt.providers.stet.generic.domain.SignatureData;
import com.yolt.providers.stet.generic.http.headers.HttpHeadersBuilder;
import com.yolt.providers.stet.generic.http.signer.HttpSigner;
import com.yolt.providers.stet.generic.service.pec.authorization.token.StetTokenPaymentPreExecutionResult;
import com.yolt.providers.stet.generic.service.pec.common.StetSigningPaymentHttpHeadersFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.util.MultiValueMap;

import java.time.Clock;
import java.time.Instant;
import java.util.Collections;

import static org.springframework.http.MediaType.APPLICATION_JSON;

public class BpceSigningPaymentHttpHeadersFactory extends StetSigningPaymentHttpHeadersFactory {

    private final Clock clock;

    public BpceSigningPaymentHttpHeadersFactory(HttpSigner httpSigner, Clock clock) {
        super(httpSigner);
        this.clock = clock;
    }

    @Override
    public HttpHeaders createPaymentAccessTokenHttpHeaders(StetTokenPaymentPreExecutionResult preExecutionResult,
                                                           MultiValueMap<String, String> requestBody) {
        return HttpHeadersBuilder.builder()
                .withAccept(Collections.singletonList(MediaType.APPLICATION_JSON))
                .withContentType(MediaType.APPLICATION_FORM_URLENCODED)
                .build();
    }

    protected HttpHeaders prepareCommonHttpHeaders(SignatureData signatureData,
                                                   String accessToken,
                                                   String psuIpAddress,
                                                   Object requestBody) {
        return HttpHeadersBuilder.builder(httpSigner)
                .withAccept(Collections.singletonList(APPLICATION_JSON))
                .withBearerAuthorization(accessToken)
                .withContentType(APPLICATION_JSON)
                .withPsuIpAddress(psuIpAddress)
                .withAutogeneratedXRequestId()
                .withDate(Instant.now(clock))
                .signAndBuild(signatureData, requestBody);
    }
}
