package com.yolt.providers.stet.generic.http.headers;

import com.yolt.providers.common.rest.tracing.ExternalTracingUtil;
import com.yolt.providers.stet.generic.domain.SignatureData;
import com.yolt.providers.stet.generic.http.signer.HttpSigner;
import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;

import java.time.Instant;
import java.util.List;
import java.util.function.Supplier;

import static com.yolt.providers.stet.generic.domain.HttpHeadersExtension.*;

public class HttpHeadersBuilder {

    private final HttpHeaders httpHeaders;
    private HttpSigner httpSigner;
    
    protected HttpHeadersBuilder(HttpHeaders httpHeaders) {
        this.httpHeaders = httpHeaders;
    }

    protected HttpHeadersBuilder(HttpHeaders httpHeaders, HttpSigner httpSigner) {
        this(httpHeaders);
        this.httpSigner = httpSigner;
    }

    protected HttpHeadersBuilder() {
        this.httpHeaders = new HttpHeaders();
    }

    public static HttpHeadersBuilder builder() {
        return new HttpHeadersBuilder();
    }

    public static HttpHeadersBuilder builder(HttpSigner httpSigner) {
        HttpHeadersBuilder builder = new HttpHeadersBuilder();
        builder.httpSigner = httpSigner;
        return builder;
    }

    public static HttpHeadersBuilder enhancing(HttpHeaders httpHeaders) {
        return new HttpHeadersBuilder(httpHeaders);
    }

    public static HttpHeadersBuilder enhancing(HttpHeaders httpHeaders, HttpSigner httpSigner) {
        return new HttpHeadersBuilder(httpHeaders, httpSigner);
    }

    public HttpHeadersBuilder withContentType(MediaType contentType) {
        this.httpHeaders.setContentType(contentType);
        return this;
    }

    public HttpHeadersBuilder withAccept(List<MediaType> accept) {
        this.httpHeaders.setAccept(accept);
        return this;
    }

    public HttpHeadersBuilder withCustomXRequestId(Supplier<String> xRequestIdSupplier) {
        this.httpHeaders.set(X_REQUEST_ID, ExternalTracingUtil.createLastExternalTraceId(xRequestIdSupplier));
        return this;
    }

    public HttpHeadersBuilder withCustomXRequestId(String requestId) {
        return withCustomXRequestId(() -> requestId);
    }

    public HttpHeadersBuilder withAutogeneratedXRequestId() {
        this.httpHeaders.set(X_REQUEST_ID, ExternalTracingUtil.createLastExternalTraceId());
        return this;
    }

    public HttpHeadersBuilder withPsuIpAddress(String psuIpAddress) {
        if (StringUtils.isNotEmpty(psuIpAddress)) {
            this.httpHeaders.set(PSU_IP_ADDRESS, psuIpAddress);
        }
        return this;
    }

    public HttpHeadersBuilder withBearerAuthorization(String accessToken) {
        this.httpHeaders.setBearerAuth(accessToken);
        return this;
    }

    public HttpHeadersBuilder withBasicAuthorization(String clientId, String clientSecret) {
        this.httpHeaders.setBasicAuth(clientId, clientSecret);
        return this;
    }

    public HttpHeadersBuilder withDate(Instant instant) {
        this.httpHeaders.setDate(instant);
        return this;
    }

    public HttpHeadersBuilder withCustomHeader(String headerName, String headerValue) {
        this.httpHeaders.set(headerName, headerValue);
        return this;
    }

    public HttpHeaders build() {
        return this.httpHeaders;
    }

    public HttpHeaders signAndBuild(SignatureData signatureData, Object body) {
        if (httpSigner == null) {
            throw new IllegalStateException("HttpSigner is required to sign HTTP headers");
        }
        this.httpHeaders.set(DIGEST, httpSigner.getDigest(body));
        this.httpHeaders.set(SIGNATURE, httpSigner.getSignature(this.httpHeaders, signatureData));
        return this.httpHeaders;
    }
}
